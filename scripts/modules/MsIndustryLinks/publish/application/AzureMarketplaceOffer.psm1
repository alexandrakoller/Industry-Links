# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

<#
    .Synopsis
    Creates an Azure Application offer for an Industry Link.

    .Description
    Creates an Azure Application offer in Partner Center for an Industry
    Link that is ready for publishing. This offer will enable your customers
    to install your Industry Link from the Azure Marketplace.

    .Parameter AssetsDirectory
    The path to the offer assets folder containing the offer logos, listing file,
    and manifest.yml file.

    .Parameter MarketplacePackageZipFile
    The path to the marketplace package zip file (marketplacePackage.zip) that
    is generated by the New-AzureDeploymentPackage cmdlet. This file should be
    named "marketplacePackage.zip".

    .Parameter OfferId
    The ID of the offer for your Industry Link. This should match the value
    of the "alias" property in the listing_config.json file.
    For example: contoso-industry-link

    .Parameter PlanId
    The ID of the plan for your Industry Link. This should match the plan
    ID of the "plan_overview" property in the listing_config.json file.
    For example: contoso-industry-link

    .Example
    # Create an Azure Application offer for the Industry Link
    New-AzureApplicationOffer -AssetsDirectory listingAssets -MarketplacePackageZipFile marketplacePackage.zip -OfferId contoso-industry-link -PlanId contoso-industry-link
#>
function New-AzureApplicationOffer {
    [CmdletBinding(SupportsShouldProcess)]
    param (
        [Parameter(Mandatory = $True, HelpMessage = "Path to offer assets folder.")]
        [String] $AssetsDirectory,
        [Parameter(Mandatory = $True, HelpMessage = "Path to marketplacePackage.zip file.")]
        [String] $MarketplacePackageZipFile,
        [Parameter(Mandatory = $True, HelpMessage = "The ID of the offer to create or update")]
        [String] $OfferId,
        [Parameter(Mandatory = $True, HelpMessage = "The ID of the plan to create or update")]
        [String] $PlanId
    )

    if (-not(Test-Path -Path $AssetsDirectory)) {
        throw "Please provide a valid assets folder path."
    }

    $workingDirectory = Get-Item .
    $listingConfigFile = "listing_config.json"

    try {
        # Package solution
        Write-Output "Packaging solution for offer $OfferId..."
        Copy-Item -Path $MarketplacePackageZipFile -Destination $AssetsDirectory -Force

        Set-Location $AssetsDirectory

        # Get Reseller Configuration
        Write-Output "Setting reseller configuration for offer $OfferId..."
        $listingConfig = Get-Content $listingConfigFile -Raw | ConvertFrom-Json
        $resellerConfig = $listingConfig.resell.resellerChannelState
        if ($null -eq $resellerConfig) {
            $resellerConfig = "Disabled"
        }
        $env:RESELLER_CHANNEL = $resellerConfig

        # Create offer
        Write-Output "Creating offer $OfferId..."
        azpc st create --update --name $OfferId --config-json $listingConfigFile --app-path "."
        Write-Output "Offer $OfferId created or updated."

        # Create plan
        Write-Output "Creating plan $PlanId for offer $OfferId..."
        azpc st plan create --update --name $OfferId --plan-name $PlanId --config-json $listingConfigFile --app-path "."
        Write-Output "Plan $PlanId for offer $OfferId created or updated."

        # Clean up
        Remove-Item "marketplacePackage.zip"
    }
    catch {
        throw "There was a problem creating or updating the offer $OfferId."
    }
    finally {
        Set-Location $workingDirectory
    }
}

Export-ModuleMember -Function New-AzureApplicationOffer
